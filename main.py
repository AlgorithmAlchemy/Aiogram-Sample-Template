from aiogram import executor
from aiogram.types import AllowedUpdates
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from data.config import CHAT, data
from keyboards.inline import prolong_pay_menu, home_menu, prolong_24_sub

import sqlite3
import asyncio

from models.sqlite3_creator import db, connect
from loader import dp, bot
import filters, handlers, models, states


async def subscribe_day_checker():
    def update_user_status(user_id, new_status):
        update_query = "UPDATE users SET user_timer_checker_status_code = ? WHERE user_id = ?"
        connect.execute(update_query, (new_status, str(user_id)))
        db.commit()

    import datetime
    current_time = datetime.datetime.now()
    print(data(), current_time)
    query = ("SELECT user_id, subscribe_status, subscribe_day, subscribe_time_start, subscribe_time_seconds,"
             " demo_or_full, vpn_strings, subscribe_activate_data, subscribe_deactivate_data, "
             "user_timer_checker_status_code FROM users")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    connect.execute(query)
    result = connect.fetchall()

    from datetime import datetime
    for row in result:
        print(row)
        (user_id, subscribe_status, subscribe_day, subscribe_time_start_str, subscribe_time_seconds, demo_or_full,
         vpn_strings, subscribe_activate_data, subscribe_deactivate_data, user_timer_checker_status_code) = row

        if subscribe_status != 'active':
            continue

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏
        subscribe_time_start = datetime.strptime(subscribe_time_start_str, '%H:%M:%S %Y-%m-%d')

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        time_difference = current_time - subscribe_time_start

        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏
        remaining_seconds = subscribe_time_seconds - time_difference.total_seconds()

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ –¥–Ω–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
        subscribe_full_day = remaining_seconds / (60 * 60 * 24)

        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∏–Ω—É—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        remaining_minutes = int(remaining_seconds / 60)

        # –¥–Ω–∏
        subscribe_day_new = round(subscribe_full_day)

        #
        #

        print(remaining_minutes)
        print(remaining_minutes, subscribe_full_day / 60)

        print(
            f'subscribe_day: {subscribe_day_new} / old: {subscribe_day}, type: {type(subscribe_day_new)}/{type(subscribe_day)}')
        print(f'subscribe_minutes: {remaining_minutes}')

        if subscribe_day > subscribe_day_new:  # –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–π
            update_query = "UPDATE users SET subscribe_day = ? WHERE user_id = ?"
            connect.execute(update_query, (subscribe_day_new, str(user_id)))
            db.commit()

        if remaining_minutes < 1440 and user_timer_checker_status_code == 0:  # 1440 –º–∏–Ω—É—Ç –≤ —Å—É—Ç–∫–∞—Ö (60 –º–∏–Ω—É—Ç * 24 —á–∞—Å–∞)
            await bot.send_message(user_id, text='–≠—Ç–æ –±—ã–ª–æ –∫–ª–∞—Å—Å–Ω–æ–µ –≤—Ä–µ–º—è...'
                                                 '\n\n'
                                                 '–ù–æ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è vpn –æ—Å—Ç–∞—ë—Ç—Å—è 24 —á–∞—Å–∞ üò¢',
                                   parse_mode='HTML', reply_markup=prolong_24_sub())

            update_user_status(user_id, 1)

        elif remaining_minutes < 15 and user_timer_checker_status_code == 1:
            await bot.send_message(chat_id=CHAT, text=f'15 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: '
                                                      f'<code>{vpn_strings}</code>')
            await bot.send_message(user_id, text='–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.',
                                   parse_mode='HTML')
            update_user_status(user_id, 2)

        elif remaining_minutes <= 0 and user_timer_checker_status_code == 2:
            end_text = (f'–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å...\n\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'
                        f' –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.')

            with open('image_two.png', 'rb') as photo:
                await bot.send_photo(user_id, photo, caption='–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –º–æ–∂–µ—Ç–µ –µ—ë –ø—Ä–æ–¥–ª–∏—Ç—å',
                                     parse_mode='HTML',
                                     reply_markup=home_menu('ended'))
            update_user_status(user_id, 3)

            query = "UPDATE users SET subscribe_status = ?, subscribe_day = ?, demo_or_full = ?," \
                    " subscribe_time_seconds = ?, vpn_strings = ?, user_timer_checker_status_code = ? WHERE user_id = ?"
            connect.execute(query, ('ended', 0, 'ended', 0, 0, 0, user_id,))
            db.commit()


async def send_message_after_20_days(user_id):
    message = "–ü—Ä–æ—à–ª–æ 20 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ö–∞–∫ –≤–∞–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å?"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id=user_id, text=message)


async def send_message_once_per_month(user_id):
    message = "–ü—Ä–æ—à–µ–ª –º–µ—Å—è—Ü —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—Å. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Ö!"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id=user_id, text=message)


#  ###################  ###################

async def on_startup(dp):
    scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
    scheduler.add_job(subscribe_day_checker, trigger='interval', hours=0, minutes=5, seconds=60)
    scheduler.start()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, allowed_updates=AllowedUpdates.all(), on_startup=on_startup)
