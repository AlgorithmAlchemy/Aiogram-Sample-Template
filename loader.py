from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.contrib.middlewares.logging import LoggingMiddleware
# from aiogram.contrib.middlewares.i18n import I18nMiddleware

from data.config import config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.logging.level),
    format=config.logging.format,
    handlers=[
        logging.FileHandler(config.logging.file),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class BotLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.storage = None
        
    def setup_storage(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        if config.redis.use_redis:
            try:
                self.storage = RedisStorage2(
                    host=config.redis.host,
                    port=config.redis.port,
                    db=config.redis.db,
                    password=config.redis.password
                )
                logger.info("Using Redis storage")
            except Exception as e:
                logger.warning(f"Redis not available: {e}")
                self.storage = MemoryStorage()
        else:
            self.storage = MemoryStorage()
            logger.info("Using Memory storage")
    
    def setup_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot = Bot(
            token=config.bot.token,
            parse_mode=types.ParseMode.HTML
        )
        logger.info("Bot initialized")
    
    def setup_dispatcher(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        self.dp = Dispatcher(self.bot, storage=self.storage)
        logger.info("Dispatcher initialized")
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.dp.middleware.setup(LoggingMiddleware())
        
        # –ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # i18n = I18nMiddleware('bot', 'locales')
        # self.dp.middleware.setup(i18n)
        
        logger.info("Middleware setup completed")
    
    def setup_filters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        from filters.admin_filter import AdminFilter
        from filters.user_filter import UserFilter
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.dp.filters_factory.bind(AdminFilter)
        self.dp.filters_factory.bind(UserFilter)
        
        logger.info("Filters setup completed")
    
    def load_handlers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        import handlers
        
        logger.info("Handlers loaded")
    
    def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            ("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("help", "‚ùì –ü–æ–º–æ—â—å"),
            ("about", "‚ÑπÔ∏è –û –±–æ—Ç–µ"),
            ("profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            ("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ("commands", "üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã"),
            ("feedback", "üí¨ –û—Ç–∑—ã–≤"),
            ("support", "üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
            ("version", "üì¶ –í–µ—Ä—Å–∏—è"),
            ("status", "üìä –°—Ç–∞—Ç—É—Å"),
            ("ping", "üèì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"),
            ("uptime", "‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"),
        ]
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        admin_commands = [
            ("ban_user", "üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            ("unban_user", "‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            ("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ("users", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            ("broadcast", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
            ("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
            ("backup", "üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è"),
            ("restore", "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"),
            ("logs", "üìù –õ–æ–≥–∏"),
            ("restart", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
        ]
        
        return commands, admin_commands
    
    def initialize(self):
        """–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        logger.info("Starting bot initialization...")
        
        self.setup_storage()
        self.setup_bot()
        self.setup_dispatcher()
        self.setup_middleware()
        self.setup_filters()
        self.load_handlers()
        
        logger.info("Bot initialization completed")
        return self.bot, self.dp


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
loader = BotLoader()
bot, dp = loader.initialize()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = ['bot', 'dp', 'loader', 'config']
