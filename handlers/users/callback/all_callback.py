import asyncio
import json
from datetime import date, timedelta
import sys

from aiogram.utils.exceptions import MessageToDeleteNotFound
from aiogram import types, utils
from aiogram.types import Update

from loader import dp, bot
import sqlite3
from data.config import demo_menu_message, one_step_confirm, data, \
    demo_day_counter, full_access_message, generate_demo_message, CHAT
from keyboards.inline import home_menu, terms_of_use_menu, main_menu_limited_access, \
    region_selection_menu, support_menu, pay_menu, before_pay_menu
from models.sqlite3_creator import db, connect

from datetime import datetime


# –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –±—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
@dp.callback_query_handler(text=r'get_free_time')
async def drop_video_id(call: types.CallbackQuery):
    message_id = call.message.message_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    chat_id = call.message.chat.id

    activate_date = data()[0]
    print(activate_date)
    query = f"SELECT netherlands FROM region_3d WHERE status_use_or_not = 0 AND status_ban_or_not = 0"
    connect.execute(query)
    result = connect.fetchone()

    print(result)

    if result is not None:
        netherlands = result[0]
        print(netherlands, '37 string all callback')
        # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è netherlands

        # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ UPDATE, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å status_use_or_not
        query_update = "UPDATE region_3d SET status_use_or_not = 1, user_id = ? WHERE netherlands = ?"
        connect.execute(query_update, (chat_id, netherlands))
        db.commit()

        # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è netherlands
    else:
        await bot.send_message(chat_id=CHAT, text=f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö vpn-—Å—Ç—Ä–æ–∫! \n–î–Ω–µ–π: 3\n–ì–µ–æ: netherlands')
        await call.answer(show_alert=True, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!')
        return

    activate_date = data()
    demo_seconds_counter = demo_day_counter * 24 * 60 * 60
    query = "UPDATE users SET subscribe_status = ?, subscribe_day = ?, subscribe_time_start = ?, demo_or_full = ?," \
            " subscribe_time_seconds = ?, vpn_strings = ? WHERE user_id = ?"
    connect.execute(query, ('active', demo_day_counter, activate_date, 'demo', demo_seconds_counter, netherlands,
                            chat_id,))
    db.commit()

    with open('image_3.png', 'rb') as photo:
        media = types.InputMediaPhoto(media=photo)

        demo_message = generate_demo_message(netherlands, demo_day_counter)

        await call.message.edit_media(media=media, reply_markup=home_menu('demo_activate', netherlands))
        await call.message.edit_caption(caption=str(demo_message),
                                        parse_mode='HTML', reply_markup=home_menu('demo_activate',
                                                                                  netherlands))


# –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–∏—Ç –≤–ø–Ω
@dp.callback_query_handler(regexp=r'accept_terms_of_use')
async def drop_video_id(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    activate_date = data()

    query = "UPDATE users SET first_start = ?, terms_of_use = ? WHERE user_id = ?"
    connect.execute(query, (1, 1, chat_id,))
    db.commit()

    await call.message.delete()

    with open('image_one.png', 'rb') as photo:
        await bot.send_photo(chat_id, photo, caption=demo_menu_message,
                             parse_mode='HTML',
                             reply_markup=home_menu('pre_demo'))


# –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –±—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
@dp.callback_query_handler(regexp=r'fast_connect')
async def drop_video_id(call: types.CallbackQuery):
    message_id = call.message.message_id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    chat_id = call.message.chat.id

    query = '''SELECT subscribe_time, demo_or_full FROM users WHERE user_id = ?'''
    parameters = (chat_id,)

    cursor = db.cursor()
    cursor.execute(query, parameters)
    result = cursor.fetchone()

    subscribe_time = result[0]
    demo_or_full = result[1]

    with open('image_one.png', 'rb') as photo:
        await bot.edit_message_caption(chat_id, message_id, photo, caption='dddd', parse_mode='HTML',
                                       reply_markup=region_selection_menu(demo_or_full=demo_or_full, access_days=0))


# –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(regexp=r'subscription_management')
async def drop_video_id(call: types.CallbackQuery):
    await call.answer('—Ç—É—Ç –ø–ª–∞—Ç–µ–∂–∫—É –≤—ã–±–∏–≤–∞–µ–º')


# –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(regexp=r'not_work_vpn')
async def drop_video_id(call: types.CallbackQuery):
    await call.message.edit_text('''–ü–æ–¥–¥–µ—Ä–∂–∫–∞

–†–µ—à–µ–Ω–∏–µ:
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.
    ''', reply_markup=support_menu())


# –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(regexp=r'not_work_outline')
async def drop_video_id(call: types.CallbackQuery):
    await call.message.edit_text(''' –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–†–µ—à–µ–Ω–∏–µ:
–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å VPN –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Outline. –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è - –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É. ''',
                                 reply_markup=support_menu())


# –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(regexp=r'close_support')
async def drop_video_id(call: types.CallbackQuery):
    await call.message.delete()


# –º–µ–Ω—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(regexp=r'subscribe')
async def drop_video_id(call: types.CallbackQuery):
    await call.message.answer(text=full_access_message, reply_markup=before_pay_menu(), parse_mode='HTML')


@dp.callback_query_handler(regexp=r'bacK_to_before_pay')
async def drop_video_id(call: types.CallbackQuery):
    await call.message.edit_text(text=full_access_message, reply_markup=before_pay_menu(), parse_mode='HTML')


@dp.callback_query_handler(regexp=r'ru_pay')
async def drop_video_id(call: types.CallbackQuery):
    pay_message = ''' 
–†–æ—Å—Å–∏–π—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä üá∑üá∫

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å —Å—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1 –º–µ—Å—è—Ü - 299 —Ä—É–±.
3 –º–µ—Å—è—Ü - 699 —Ä—É–±.
6 –º–µ—Å—è—Ü - 1299 —Ä—É–±.
12 –º–µ—Å—è—Ü - 2 299 —Ä—É–±.

–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª—é–±–æ–π —É–¥–æ–±–Ω–æ–π –∫–∞—Ä—Ç–æ–π –†–§: –ú–ò–†,  Visa, MasterCard  üí≥
    '''
    await call.message.edit_text(text=pay_message, reply_markup=pay_menu("ru"), parse_mode='HTML')


@dp.callback_query_handler(regexp=r'eng_pay')
async def drop_video_id(call: types.CallbackQuery):
    pay_message = ''' 
–ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Å–µ—Ä–≤–µ—Ä üá≥üá±

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å —Å—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1 –º–µ—Å—è—Ü - 299 —Ä—É–±.
3 –º–µ—Å—è—Ü - 699 —Ä—É–±.
6 –º–µ—Å—è—Ü - 1299 —Ä—É–±.
12 –º–µ—Å—è—Ü - 2 299 —Ä—É–±.

–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ª—é–±–æ–π —É–¥–æ–±–Ω–æ–π –∫–∞—Ä—Ç–æ–π –†–§: –ú–ò–†,  Visa, MasterCard  üí≥
    '''
    await call.message.edit_text(text=pay_message, reply_markup=pay_menu("net"), parse_mode='HTML')


@dp.callback_query_handler(regexp=r'instructions')
async def drop_video_id(call: types.CallbackQuery):
    await call.answer('–†–ê–ó–†–ê–ë–û–¢–ö–ê')
    return

    chat_id = call.message.chat.id
    query = '''SELECT subscribe_time, demo_or_full FROM users WHERE user_id = ?'''
    parameters = (chat_id,)

    cursor = db.cursor()
    cursor.execute(query, parameters)
    result = cursor.fetchone()

    subscribe_time = result[0]
    demo_or_full = result[1]

    instructions_message = ''' –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Outline. 

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ç–æ–∫–æ–ª—É –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –≤ App Store.
–í–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Free Surfer VPN. –ö–∞–∂–¥–æ–º—É –∫–ª—é—á—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω.
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Outline –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏ –∑–∞–Ω–∏–º–∞—é—Ç –Ω–µ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã.
–í—Å—ë —á—Ç–æ –æ—Ç –≤–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è - –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ–π –≤–∞–º —Å—Ç—Ä–∞–Ω—ã –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
–î–∞–ª—å–Ω–µ–π—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Outline.
–¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∞—Ç—å –∏ –≤—ã–∫–ª—é—á–∞—Ç—å VPN, –∞ —Ç–∞–∫ –∂–µ –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏–æ–Ω.
–î–ª—è –±–æ–ª—å—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:


    '''

    await bot.send_message(chat_id, text=one_step_confirm, parse_mode='HTML',
                           reply_markup=home_menu(demo_or_full=demo_or_full))


@dp.callback_query_handler(regexp=r'support')
async def drop_video_id(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    query = '''SELECT demo_or_full FROM users WHERE user_id = ?'''
    parameters = (chat_id,)

    cursor = db.cursor()
    cursor.execute(query, parameters)
    result = cursor.fetchone()

    support_message = '''–ü–æ–¥–¥–µ—Ä–∂–∫–∞
    
–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π @localvpn_support.
    '''

    await bot.send_message(chat_id, text=support_message, parse_mode='HTML',
                           reply_markup=support_menu())


@dp.callback_query_handler(regexp=r'back_region_menu')
async def drop_video_id(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    user_id = call.message.from_user.id

    query = '''SELECT subscribe_time, demo_or_full FROM users WHERE user_id = ?'''
    parameters = (chat_id,)

    cursor = db.cursor()
    cursor.execute(query, parameters)
    result = cursor.fetchone()

    subscribe_time = result[0]
    demo_or_full = result[1]

    with open('image_one.png', 'rb') as photo:
        await bot.edit_message_caption(chat_id, call.message.message_id, photo,
                                       caption=demo_menu_message.replace('days_counter', str(subscribe_time)),
                                       parse_mode='HTML',
                                       reply_markup=home_menu(demo_or_full))


# ####################### –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #######################
@dp.callback_query_handler(regexp=r'netherlands')
async def drop_video_id(call: types.CallbackQuery):
    chat_id = call.message.chat.id
    query = '''SELECT subscribe_time, demo_or_full FROM users WHERE user_id = ?'''
    parameters = (chat_id,)

    cursor = db.cursor()
    cursor.execute(query, parameters)
    result = cursor.fetchone()

    subscribe_time = result[0]
    demo_or_full = result[1]

    if subscribe_time != 0:
        await call.answer(show_alert=True, text='–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!')
        return

    if demo_or_full == 'demo':
        db.execute(f''' SELECT vpn_strings FROM users WHERE user_id = {chat_id} ''')


# Callback-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('mount'))
async def process_callback_button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    months = int(callback_query.data.split('_')[1])
    server_geo = callback_query.data.split('_')[2]

    if server_geo == "net":
        server_geo = "netherlands"
    if server_geo == "ru":
        server_geo = "russia"

    query = f"SELECT {server_geo} FROM region_{months}m WHERE status_use_or_not = 0 AND status_ban_or_not = 0"
    connect.execute(query)
    result = connect.fetchone()

    print(result)

    try:
        if result[0] is not None and result[0] != 'None':
            vpn_server = result[0]
            print(vpn_server)
            # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è netherlands

            # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ UPDATE, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å status_use_or_not
            # query_update = f"UPDATE region_{months}m SET status_use_or_not = 1, user_id = ? WHERE {server_geo} = ?"
            # connect.execute(query_update, (user_id, vpn_server))
            # db.commit()

            # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è netherlands
        else:
            await bot.send_message(chat_id=CHAT, text=f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö vpn-—Å—Ç—Ä–æ–∫! \n–ú–µ—Å—è—Ü–µ–≤: {months}\n–ì–µ–æ: {server_geo}')
            await callback_query.answer(show_alert=True, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!')
            return

    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        await bot.send_message(chat_id=CHAT, text=f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö vpn-—Å—Ç—Ä–æ–∫! \n–ú–µ—Å—è—Ü–µ–≤: {months}\n–ì–µ–æ: {server_geo}')
        await callback_query.answer(show_alert=True, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!')

        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
    invoice_amount = calculate_invoice_amount(months)
    invoice_text = f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤: {invoice_amount} —Ä—É–±."

    payload_value = f"subscription_{months}_{server_geo}"  # –ù–∞–ø—Ä–∏–º–µ—Ä, "subscription_3" –¥–ª—è 3 –º–µ—Å—è—Ü–µ–≤

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
    mes = await bot.send_invoice(
        chat_id=user_id,
        title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤",
        description=invoice_text,
        payload=payload_value,
        provider_token="390540012:LIVE:38893",  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        # provider_token="381764678:TEST:63864",
        currency="RUB",
        prices=[types.LabeledPrice(label=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤", amount=invoice_amount * 100)]
    )

    cursor = db.cursor()

    data_to_insert = [
        (user_id, message_id),
        (mes.chat.id, mes.message_id)
    ]

    cursor.executemany('''
        INSERT INTO invoice (user_id, message_id) VALUES (?, ?)
    ''', data_to_insert)

    db.commit()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def calculate_invoice_amount(months):
    if months == 1:
        return 299
    elif months == 3:
        return 699
    elif months == 6:
        return 1299
    elif months == 12:
        return 2299
    else:
        return 0


@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    print(pre_checkout_query)
    cursor = db.cursor()

    await bot.answer_pre_checkout_query(
        pre_checkout_query.id, ok=True
    )

    user_id = pre_checkout_query.from_user.id

    # –í—ã–±–æ—Ä–∫–∞ user_id –∏ message_id —Å status –Ω–µ —Ä–∞–≤–Ω—ã–º 1
    cursor.execute(f'''
        SELECT user_id, message_id
        FROM invoice
        WHERE status <> 1 AND user_id == {user_id}
    ''')

    rows = cursor.fetchall()

    for i in rows:
        print(i[0], i[1])
        try:
            await bot.delete_message(i[0], i[1])
        except MessageToDeleteNotFound:
            pass

        query = "UPDATE invoice SET status = ?"
        connect.execute(query, (1,))
        db.commit()

    print(pre_checkout_query.invoice_payload)   # subscription_1_russia

    months = int(pre_checkout_query.invoice_payload.split('_')[1])
    server_geo = str(pre_checkout_query.invoice_payload.split('_')[2])
    invoice_amount = calculate_invoice_amount(months)

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

    await bot.send_message(
        user_id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."
    )

    # –¥–∞—ë–º –≤–ø–Ω —Å—Ç—Ä–æ–∫—É
    query = f"SELECT {server_geo} FROM region_{months}m WHERE status_use_or_not = 0 AND status_ban_or_not = 0"
    connect.execute(query)
    result = connect.fetchone()

    print(result)

    if result[0] is not None and result[0] != 'None':
        vpn_server = result[0]
        print('vpn server', vpn_server)
        query_update = f"UPDATE region_{months}m SET status_use_or_not = 1, user_id = ? WHERE {server_geo} = ?"
        connect.execute(query_update, (user_id, vpn_server))
        db.commit()

    else:
        await bot.send_message(chat_id=CHAT, text=f'–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É {user_id} –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤')
        await bot.send_message(chat_id=user_id, show_alert=True,
                               text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
        return

    #   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   ##   #

    seconds_counter = int(months * 30 * 24 * 60 * 60)
    subscribe_day = int(months * 30)
    activate_date = data()

    query = "UPDATE users SET subscribe_status = ?, subscribe_day = ?, subscribe_time_start = ?, demo_or_full = ?," \
            " subscribe_time_seconds = ?, vpn_strings = ? WHERE user_id = ?"
    connect.execute(query, ('active', subscribe_day, activate_date, 'full', seconds_counter, vpn_server,
                            user_id,))
    db.commit()

    #
    #
    #

    demo_message = generate_demo_message(vpn_server, subscribe_day)

    with open('image_3.png', 'rb') as photo:
        await bot.send_photo(user_id, photo, caption=demo_message.replace('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', ''),
                             parse_mode='HTML',
                             reply_markup=home_menu(demo_or_full='full', link=vpn_server))