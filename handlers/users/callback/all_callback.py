import asyncio
import json
from datetime import date, timedelta
import sys
import logging

from aiogram.utils.exceptions import MessageToDeleteNotFound
from aiogram import types, utils
from aiogram.types import Update

from loader import dp, bot
import sqlite3
from models.sqlite3_creator import db, connect

from datetime import datetime
from data.config import OWNER, SUPPORT
from keyboards.inline.keyboards import (
    get_main_keyboard, get_admin_keyboard, get_settings_keyboard,
    get_confirm_keyboard, get_back_keyboard
)

logger = logging.getLogger(__name__)


@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def main_menu_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    user_id = callback_query.from_user.id
    
    if user_id in OWNER:
        await callback_query.message.edit_text(
            "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=types.ParseMode.HTML,
            reply_markup=get_admin_keyboard()
        )
    else:
        await callback_query.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode=types.ParseMode.HTML,
            reply_markup=get_main_keyboard()
        )
    
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'"""
    user = callback_query.from_user
    
    profile_text = f"""
<b>üìã –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>ID:</b> <code>{user.id}</code>
<b>–ò–º—è:</b> {user.first_name}
<b>–§–∞–º–∏–ª–∏—è:</b> {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
<b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%d.%m.%Y')}

<b>–°—Ç–∞—Ç—É—Å:</b> {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.id in OWNER else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
"""
    
    await callback_query.message.edit_text(
        profile_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_back_keyboard()
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "settings")
async def settings_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    settings_text = """
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:
"""
    
    await callback_query.message.edit_text(
        settings_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_settings_keyboard()
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "help")
async def help_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    help_text = """
<b>‚ùì –ü–æ–º–æ—â—å</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {support}
""".format(support=SUPPORT)
    
    await callback_query.message.edit_text(
        help_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_back_keyboard()
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "about")
async def about_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
    about_text = """
<b>‚ÑπÔ∏è –û –±–æ—Ç–µ</b>

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ aiogram 2.x

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ Python 3.10+
‚Ä¢ aiogram 2.x
‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ APScheduler –¥–ª—è –∑–∞–¥–∞—á

<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> –°–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
"""
    
    await callback_query.message.edit_text(
        about_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_back_keyboard()
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "support")
async def support_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"""
    support_text = f"""
<b>üîó –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º:

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> {SUPPORT}

<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 24/7

<b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å:</b>
‚Ä¢ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
"""
    
    await callback_query.message.edit_text(
        support_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_back_keyboard()
    )
    await callback_query.answer()


# –ê–¥–º–∏–Ω—Å–∫–∏–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query_handler(lambda c: c.data == "admin_stats")
async def admin_stats_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if callback_query.from_user.id not in OWNER:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    stats_text = """
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: 0
‚Ä¢ –ö–æ–º–∞–Ω–¥: 0

<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0

<b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 0 –¥–Ω–µ–π
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0
"""
    
    await callback_query.message.edit_text(
        stats_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_back_keyboard("main_menu")
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "admin_users")
async def admin_users_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if callback_query.from_user.id not in OWNER:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    users_text = """
<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""
    
    await callback_query.message.edit_text(
        users_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_back_keyboard("main_menu")
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "admin_ban")
async def admin_ban_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    if callback_query.from_user.id not in OWNER:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    ban_text = """
<b>üö´ –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username.
"""
    
    await callback_query.message.edit_text(
        ban_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=get_back_keyboard("main_menu")
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == "cancel")
async def cancel_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
    await callback_query.message.delete()
    await callback_query.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
