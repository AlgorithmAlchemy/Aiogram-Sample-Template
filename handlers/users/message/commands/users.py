from aiogram import types
from aiogram.types import ParseMode
import logging
from datetime import datetime

from data.config import config
from loader import dp
from models.user import User
from filters.admin_filter import AdminFilter

logger = logging.getLogger(__name__)


class UsersCommand:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users"""
    
    @staticmethod
    async def handle(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if message.from_user.id not in config.admin.owner_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            recent_users = User.select().order_by(User.created_at.desc()).limit(10)
            
            users_text = "<b>üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
            
            for user in recent_users:
                status = "üö´" if user.is_banned else "‚úÖ"
                username = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
                users_text += (
                    f"{status} <b>{user.first_name}</b> "
                    f"(ID: <code>{user.user_id}</code>)\n"
                    f"Username: {username}\n"
                    f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n"
                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user.warnings}\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = User.select().count()
            active_users = User.select().where(
                User.last_activity >= datetime.now().replace(
                    hour=0, minute=0, second=0, microsecond=0
                )
            ).count()
            
            users_text += f"""
<b>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_users}

<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</i>
"""
            
            await message.answer(
                users_text,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error getting users list: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
@dp.message_handler(AdminFilter(), commands=['users'])
async def users_cmd(message: types.Message):
    await UsersCommand.handle(message)
