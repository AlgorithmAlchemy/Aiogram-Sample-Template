from aiogram import types
from aiogram.types import ParseMode
import logging
from datetime import datetime, timedelta

from data.config import config
from loader import dp
from models.user import User, UserStats
from filters.admin_filter import AdminFilter

logger = logging.getLogger(__name__)


class StatsCommand:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    
    @staticmethod
    async def handle(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        if message.from_user.id not in config.admin.owner_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = User.select().count()
            active_today = User.select().where(
                User.last_activity >= datetime.now().replace(
                    hour=0, minute=0, second=0, microsecond=0
                )
            ).count()
            active_week = User.select().where(
                User.last_activity >= datetime.now() - timedelta(days=7)
            ).count()
            banned_users = User.select().where(User.is_banned).count()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            total_messages = sum(
                stats.messages_sent for stats in UserStats.select()
            )
            total_commands = sum(
                stats.commands_used for stats in UserStats.select()
            )
            total_files = sum(
                stats.files_sent for stats in UserStats.select()
            )
            
            stats_text = f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}
‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {banned_users}

<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_commands}
‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}

<b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {config.bot.version}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {StatsCommand._get_uptime()}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
            
            await message.answer(
                stats_text,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    @staticmethod
    def _get_uptime() -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
@dp.message_handler(AdminFilter(), commands=['stats'])
async def stats_cmd(message: types.Message):
    await StatsCommand.handle(message)
